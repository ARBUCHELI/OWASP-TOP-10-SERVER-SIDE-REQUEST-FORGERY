# IDENTIFY AND PREVENT SERVER-SIDE REQUEST FORGERY
--------------------------------------------------

* Introduction
--------------
Modern applications rarely exist as their own unit in today’s connected world. Instead, a single application may be compromised of multiple services, expanding across different networks 
and machines. Large databases generally operate on their own systems, while the application logic happens on another. Now, with the widespread adoption of cloud services, certain 
components may be operated not only on different networks and machines but by entirely independent organizations.

Given this, it is not uncommon for applications to offer capabilities that allow them to generate requests and retrieve data from separate systems. While this operation can be used to 
access and initiate complex processes on a cloud service provider, it can also provide users with basic features designed to improve the overall application experience.

Think, for example, a profile picture. We could ask users to download a picture they like and upload it to our application. However, if it’s already on the web, why not just let them give 
us a URL? With careful tuning, we can create an easy-to-use feature to streamline user customization!

However, as with everything application-wise, we need to be conscious of the security of such functions. What happens if a user makes a request to a file that isn’t a picture? What 
happens if they enter a URL designed to access a restricted resource such as an administrative panel?

If we’re not careful, we can easily introduce a server-side request forgery (SSRF) vulnerability within our application. SSRF is an incredibly serious vulnerability that occurs when an 
attacker can force a server-side application to make arbitrary requests on our behalf. Depending on how an application is configured, the impacts can range from wasted bandwidth to a full 
system compromise!

In the coming examples, we’ll see the potential impact of such issues and several basic solutions we can use to prevent this vulnerability within our software.

-------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Server-Side Request Forgery Vulnerability
-------------------------------------------
Let’s look at an application designed to illustrate the potential issues associated with SSRF. This application contains three endpoints: /, /admin, /ssrf.

The / endpoint provides users with a simple form containing only a button. When the button is clicked, a GET request is sent to /admin, the other endpoint. This endpoint accepts a GET 
parameter named ‘url’ and sends a HTTP request to the provided URL. In the previous form, found at /, the ‘url’ parameter is set to a site that returns the current time.

The /ssrf endpoint is designed only to be accessible from the localhost (127.0.0.1). While not as common as it used to be, this was a standard way to “secure” an endpoint in the past. The 
idea behind restricting access to 127.0.0.1 is that it would only be accessible to a user with access to the server’s operating system. However, as we’ll soon see, this method should 
never be trusted.

If we look at the code for the /ssrf endpoint, we can see several interesting components:

	1. The “url” parameter is sent directly to the requests.get() resulting in requests.get(url). Leveraging this, we can force the server to send HTTP GET requests to arbitrary locations by 
	simply changing the “url” parameter! This, by definition, is a perfect example of an SSRF!

	2. Because we can send an HTTP request from the scope of the application, we can access the /admin endpoint!

* Instructions
--------------
NOTE: If the webpage within the learning environment does not load properly, refresh the learning environment browser.

To bypass the security for this endpoint, we need to enter https://127.0.0.1:8181/admin within the ‘url’ parameter in the URL. Your URL should look like the following:

	https://localhost/ssrf?url=http://127.0.0.1:8181/admin

Once we do this, we’ll see the message displayed to an authenticated admin!

NOTE BELOW: If you do not see the following displayed message:

	Here's the Time:
	Welcome, Admin! You've successfully exploited a server-side request forgery vulnerability!

Click the Run button within the code editor and refresh the learning environment’s URL

app.py
------
from flask import Flask
from flask import request
import requests

app = Flask(__name__)

@app.route('/')
def index():
    return '''
	CHECK THE TIME BASED ON THIS SYSTEM'S IP!
	<form action="/ssrf" id="time">
	<label>Please Enter Your URL</label>
	<input type="hidden" id="url" name="url" value="https://worldtimeapi.org/api/ip">
	</form>
	<button type="submit" form="time">Check the time!</button>

	'''

@app.route('/admin', methods=['GET'])
def admin():
    ip_addr = request.remote_addr
    if ip_addr == '127.0.0.1':
        return "Welcome, Admin! You've successfully exploited a server-side request forgery vulnerability!"
    else:
        return "Access Denied"
        
@app.route('/ssrf', methods=['GET'])
def ssrf():
    url = request.args.get('https://127.0.0.1:8181/admin')
    try:
        r = requests.get(url)
        body = r.text
        return 'Here\'s the Time:<br>' + body
    except Exception as e:
        return str(e)

app.run(host='0.0.0.0', port=8181)

------------------------------------------------------------------------------------------------------------------------------------------------------------------

* Server-Side Request Forgery Patched
-------------------------------------
In the last example, we saw how we could access a “protected” endpoint by exploiting a server-side request forgery (SSRF). Let’s look at a safer app version with the SSRF vulnerability 
removed. While the /admin endpoint still uses the localhost IP for access control, by removing the SSRF we reduce the overall risk of authorized users accessing the protected endpoint.

Looking back at the /ssrf endpoint, we see several new lines of code added to the method call. Below the url parameter component, we now have an array called safe_host. This array 
contains an entry for a predetermined host, which we have deemed safe. We also have a safe_content_type parameter which defines a list of content types we have chosen to allow in the 
request responses. From here, we can use these features, in this case, just the safe_host list, to determine if a requested URL is allowed.

By implementing an allow list, we can help ensure that the requests our server sends do not go to unexpected and potentially dangerous places, such as the /admin endpoint. It is worth 
noting here, however, that this safety measure may not be enough in some situations. For example, if the application was set to follow redirects, and an open redirect vulnerability was 
uncovered in the “safe” host, it may still be possible to make arbitrary requests to a dangerous location!

Overall, SSRF is an incredibly dangerous vulnerability, which generally requires a layered approach for protection. When securing your application against SSRF, we should consider the 
following solutions:

	. Apply an allow list to restrict arbitrary requests.
	. Ensure “protected” assets have robust access controls spanning past just IPs.

* Instructions
--------------
Try to bypass the security for the patched website by inserting the following:

https://127.0.0.1:8181/admin within the ‘url’ parameter in the URL. Your URL should look like the following:

https://localhost/ssrf?url=http://127.0.0.1:8181/admin

app.py
------
from flask import Flask
from flask import request
import requests
from urllib.parse import urlparse


app = Flask(__name__)

@app.route('/')
def index():
    return '''
        CHECK THE TIME BASED ON THIS SYSTEM'S IP!
        <form action="/ssrf" id="time">
        <label>Please Enter Your URL</label>
        <input type="hidden" id="url" name="url" value="https://worldtimeapi.org/api/ip">
        </form>
        <button type="submit" form="time">Check the time!</button>

        '''
@app.route('/admin', methods=['GET'])
def admin():
    ip_addr = request.remote_addr
    if ip_addr == '127.0.0.1':
        return "Welcome Admin! You've succesfully exploited a server side request forgery vulnerability!"
    else:
        return "Access Denied"
@app.route('/ssrf', methods=['GET'])
def ssrf():
    url = request.args.get('url')
    safe_host = ['worldtimeapi.org']
    safe_content_type = ['application/json']
    url_object = urlparse(url)
    if url_object.hostname not in safe_host:
        return "You've entered a bad URL!"
    try:
        r = requests.get(url)
        body = r.text
        return 'Here\'s the Time:<br>' + body
    except Exception as e:
        return str(e)

app.run(host='0.0.0.0', port=8181)

------------------------------------------------------------------------------------------------------------------------------------------------------------------




































